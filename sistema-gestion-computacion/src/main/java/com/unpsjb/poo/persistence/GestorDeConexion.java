package com.unpsjb.poo.persistence;

import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Properties;
/**
 * Gestor de conexi√≥n a la base de datos (patr√≥n Singleton).
 * Se encarga de leer las credenciales desde config.properties y mantener
 * una √∫nica conexi√≥n abierta durante la ejecuci√≥n de la aplicaci√≥n.
 */
public class GestorDeConexion {

    private static GestorDeConexion instancia;
    private Connection conexion;

    // =====================================================
    // üîπ Constructor privado (solo se ejecuta una vez)
    // =====================================================
    private GestorDeConexion() {
        Properties props = new Properties();
        try (InputStream input = getClass().getResourceAsStream("/config.properties")) {

            if (input == null) {
                throw new IOException("No se encontr√≥ el archivo config.properties dentro de resources.");
            }

            props.load(input);

            String URL = props.getProperty("db.url");
            String user = props.getProperty("db.user");
            String password = props.getProperty("db.password");

            Class.forName("org.postgresql.Driver");
            this.conexion = DriverManager.getConnection(URL, user, password);

            System.out.println("‚úÖ Conexi√≥n establecida correctamente con la base de datos.");

        } catch (SQLException e) {
            System.err.println("‚ùå Error SQL al conectar con la base de datos: " + e.getMessage());
        } catch (IOException e) {
            System.err.println("‚ùå Error al leer el archivo de configuraci√≥n: " + e.getMessage());
        } catch (ClassNotFoundException e) {
            System.err.println("‚ùå No se encontr√≥ el driver de PostgreSQL: " + e.getMessage());
        }
    }

    // =====================================================
    // üîπ M√©todo est√°tico para obtener la instancia √∫nica
    // =====================================================
    public static synchronized GestorDeConexion getInstancia() {
        if (instancia == null) {
            instancia = new GestorDeConexion();
        }
        return instancia;
    }

    // =====================================================
    // üîπ Devuelve la conexi√≥n activa
    // =====================================================
    public Connection getConexion() {
        return this.conexion;
    }

    // =====================================================
    // üîπ Cierra la conexi√≥n (si est√° abierta)
    // =====================================================
    public void closeConexion() {
        if (this.conexion != null) {
            try {
                this.conexion.close();
                System.out.println("üîí Conexi√≥n cerrada correctamente.");
            } catch (SQLException e) {
                System.err.println("Error al cerrar la conexi√≥n: " + e.getMessage());
            }
        }
    }

    // =====================================================
    // üîπ M√©todo de acceso r√°pido (atajo est√°tico)
    // =====================================================
    public static Connection getConnection() {
        return getInstancia().getConexion();
    }
}
